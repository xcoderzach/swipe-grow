{
  "name": "micropromise",
  "version": "0.3.5",
  "description": "A+ promises",
  "implements": [
    "Promises/A+ 1.1.0"
  ],
  "keywords": [
    "promise",
    "future",
    "promises-aplus"
  ],
  "author": {
    "name": "Kaerus",
    "email": "contact@kaerus.com",
    "url": "http://kaerus.com"
  },
  "contributors": [
    {
      "name": "anders elo",
      "email": "anders@kaerus.com"
    }
  ],
  "dependencies": {
    "microtask": "*"
  },
  "devDependencies": {
    "promises-aplus-tests": ">=1.0.0",
    "benchmark": ">=1.0.0",
    "test-support": "~0.3"
  },
  "bugs": {
    "url": "https://github.com/kaerus-component/uP/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kaerus-component/uP"
  },
  "scripts": {
    "test": "make test"
  },
  "main": "index.js",
  "license": "APACHE2_0",
  "readme": "<a href=\"http://promises-aplus.github.com/promises-spec\">\n    <img src=\"http://promises-aplus.github.io/promises-spec/assets/logo-small.png\"\n         align=\"right\" alt=\"Promises/A+ logo\" />\n</a>\n[![Build Status](https://travis-ci.org/kaerus-component/uP.png)](https://travis-ci.org/kaerus-component/uP)\n\n# microPromise(uP) - A+ v1.1 compliant promises\nProvides a [fast](benchmarks.md) Promises framework which is fully conforming to the Promise/A+ v1.1 specification (passing ~870 [tests](https://travis-ci.org/kaerus-component/uP)).\n\n  - [task](#task)\n  - [uP.then()](#upthenonfulfillfunctiononrejectfunctiononnotifyfunction)\n  - [uP.spread()](#upspreadonfulfillfunctiononrejectfunctiononnotifyfunction)\n  - [uP.done()](#updoneonfulfillfunctiononrejectfunctiononnotifyfunction)\n  - [uP.fulfill()](#upfulfillvalueobject)\n  - [uP.resolve()](#upresolvevalueobject)\n  - [uP.reject()](#uprejectreasonobject)\n  - [uP.timeout()](#uptimeouttimenumbercallbackfunction)\n  - [uP.wrap()](#upwrapprotoobject)\n  - [uP.defer()](#updefer)\n  - [uP.async()](#upasync)\n  - [uP.join()](#upjoinpromisesarray)\n  - [resolver()](#resolver)\n\n## uP.then(onFulfill:Function, onReject:Function, onNotify:Function)\n\n  Attaches callback,errback,notify handlers and returns a promise \n  \n  Example: catch fulfillment or rejection\n```js\n   var p = uP();\n   p.then(function(value){\n       console.log(\"received:\", value);\n   },function(error){\n       console.log(\"failed with:\", error);\n   });\n   p.fulfill('hello world!'); // => 'received: hello world!'\n```\n\n  \n  Example: chainable then clauses\n```js\n   p.then(function(v){\n       console.log('v is:', v);\n       if(v > 10) throw new RangeError('to large!');\n       return v*2;\n   }).then(function(v){ \n       // gets v*2 from above\n       console.log('v is:', v)\n   },function(e){\n       console.log('error2:', e);\n   });\n   p.fulfill(142); // => v is: 142, error2: [RangeError:'to large']\n```\n\n  \n  Example: undefined callbacks are ignored\n```js\n   p.then(function(v){\n       if(v < 0) throw v;\n       return v;\n   }).then(undefined,function(e){\n       e = -e;\n       return e;\n   }).then(function(value){\n       console.log('we got:', value);\n   });\n   p.fulfill(-5); // => we got: 5\n```\n\n## uP.spread(onFulfill:Function, onReject:Function, onNotify:Function)\n\n  Same semantic as `then` but spreads array value into separate arguments \n  \n  Example: Multiple fulfillment values\n```js\n   p = uP();\n   p.fulfill([1,2,3])\n   p.spread(function(a,b,c){\n       console.log(a,b,c); // => '1 2 3'\n   });\n```\n\n## uP.done(onFulfill:Function, onReject:Function, onNotify:Function)\n\n  Same as `then` but terminates a promise chain and calls onerror / throws error on unhandled Errors \n  \n  Example: capture error with done\n```js\n   p.then(function(v){\n       console.log('v is:', v);\n       if(v > 10) throw new RangeError('to large!');\n       return v*2;\n   }).done(function(v){ \n       // gets v*2 from above\n       console.log('v is:', v)\n   });\n   p.fulfill(142); // => v is: 142, throws [RangeError:'to large']\n```\n\n  Example: use onerror handler\n```js\n   p.onerror = function(error){ console.log(\"Sorry:\",error) };\n   p.then(function(v){\n       console.log('v is:', v);\n       if(v > 10) throw new RangeError('to large!');\n       return v*2;\n   }).done(function(v){ \n       // gets v*2 from above\n       console.log('v is:', v)\n   });\n   p.fulfill(142); // => v is: 142, \"Sorry: [RangeError:'to large']\"\n```\n\n## uP.fulfill(value:Object)\n\n  Fulfills a promise with a `value` \n  \n   Example: fulfillment\n```js\n   p = uP();\n   p.fulfill(123);\n```\n\n   \n   Example: multiple fulfillment values in array\n```js\n   p = uP();\n   p.fulfill([1,2,3]);\n   p.resolved; // => [1,2,3]\n```\n\n## uP.resolve(value:Object)\n\n  Resolves a promise with a `value` yielded from another promise \n  \n   Example: resolve literal value\n```js\n   p = uP();\n   p.resolve(123); // fulfills promise with 123\n```\n\n   Example: resolve value from another pending promise\n```js\n   p1 = uP();\n   p2 = uP();\n   p1.resolve(p2);\n   p2.fulfill(123) // => p2._value = 123\n```\n\n## uP.reject(reason:Object)\n\n  Rejects promise with a `reason`\n  \n   Example:\n```js\n   p = uP();\n   p.then(function(ok){\n      console.log(\"ok:\",ok);\n   }, function(error){\n      console.log(\"error:\",error);\n   });\n   p.reject('some error'); // outputs => 'error: some error'\n```\n\n## uP.timeout(time:Number, callback:Function)\n\n  Timeout a pending promise and invoke callback function on timeout.\n  Without a callback it throws a RangeError('exceeded timeout').\n  \n  Example: timeout & abort()\n```js\n   var p = Promise();\n   p.attach({abort:function(msg){console.log('Aborted:',msg)}});\n   p.timeout(5000);\n   // ... after 5 secs ... => Aborted: |RangeError: 'exceeded timeout']\n```\n\n  Example: cancel timeout\n```js\n   p.timeout(5000);\n   p.timeout(null); // timeout cancelled\n```\n\n## uP.wrap(proto:Object)\n\n  Wraps a `proto` into a promise\n  \n  Example: wrap an Array\n```js\n   p = Promise();\n   c = p.wrap(Array);\n   c(1,2,3); // => calls constructor and fulfills promise \n   p.resolved; // => [1,2,3]\n```\n\n## uP.defer()\n\n  Deferres a task and fulfills with return value.\n  The process may also return a promise itself which to wait on.  \n  \n  Example: Make readFileSync async\n```js\n   fs = require('fs');\n   var asyncReadFile = uP().defer(fs.readFileSync,'./index.js','utf-8');\n   asyncReadFile.then(function(data){\n       console.log(data)\n   },function(error){\n       console.log(\"Read error:\", error);\n   });\n```\n\n## uP.async()\n\n  Adapted for nodejs style functions expecting a callback. \n  \n  Example: make readFile async\n```js\n   fs = require('fs');\n   var asyncReadFile = uP.async(fs.readFile,'./index.js','utf-8');\n   asyncReadFile.then(function(data){\n       console.log(data);\n   },function(error){\n       console.log(\"Read error:\", error);\n   });\n```\n\n## uP.join(promises:Array)\n\n  Joins promises and collects results into an array.\n  If any of the promises are rejected the chain is also rejected.  \n  \n  Example: join with two promises\n```js\n   a = uP();\n   b = uP();\n   c = uP();\n   a.join([b,c]).spread(function(a,b,c){\n       console.log(a,b,c);\n   },function(err){\n       console.log('error=',err);\n   });\n   b.fulfill('world');\n   a.fulfill('hello'); \n   c.fulfill('!'); // => 'hello world !''\n```\n",
  "readmeFilename": "README.md",
  "_id": "micropromise@0.3.5",
  "_from": "micropromise@"
}
