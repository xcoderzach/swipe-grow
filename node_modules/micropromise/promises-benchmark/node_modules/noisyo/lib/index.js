(function(){
  var pinky, all, stream, isStream, isStandardOutput, pipeFrom, writeTo, slurp, spit;
  pinky = require('pinky');
  all = require('pinky-combinators').all;
  stream = require('stream');
  isStream = function(a){
    return typeof (a != null ? a.pipe : void 8) === 'function';
  };
  isStandardOutput = function(a){
    return a === process.stdout || a === process.stderr;
  };
  pipeFrom = function(source, dest){
    var promise;
    promise = pinky();
    if (isStandardOutput(dest)) {
      source.on('end', fulfillRead);
    } else {
      dest.on('finish', fulfill);
    }
    source.on('error', handleErrors);
    source.pipe(dest);
    return promise;
    function handleErrors(err){
      return promise.reject(err);
    }
    function cleanup(){
      return source.removeListener('error', handleErrors);
    }
    function fulfillRead(){
      promise.fulfill(dest);
      return source.removeListener('end', fulfillRead);
    }
    function fulfill(){
      promise.fulfill(dest);
      return dest.removeListener('finish', fulfill);
    }
    return fulfill;
  };
  writeTo = function(dest, source, encoding){
    var promise;
    promise = pinky();
    dest.write(source, encoding, function(err){
      switch (false) {
      case !err:
        return promise.reject(err);
      default:
        return promise.fulfill(dest);
      }
    });
    return promise;
  };
  slurp = function(sourceP){
    var promise, data;
    promise = pinky();
    data = '';
    pinky(sourceP).then(function(source){
      data = (source.read(0) || '').toString();
      source.on('readable', grabChunk(source));
      source.on('end', fulfill);
      return source.on('end', cleanUp(source));
    });
    return promise;
    function grabChunk(source){
      return function(){
        var chunk;
        chunk = source.read();
        if (chunk !== null) {
          return data += chunk.toString();
        }
      };
    }
    function fulfill(){
      return promise.fulfill(data);
    }
    function cleanUp(source){
      return function(){
        source.removeListener('readable', grabChunk);
        source.removeListener('end', fulfill);
        return source.removeListener('end', cleanUp);
      };
    }
    return cleanUp;
  };
  spit = curry$(function(destP, sourceP){
    var promise;
    promise = pinky();
    all([destP, sourceP]).then(function(arg$){
      var dest, source, p2;
      dest = arg$[0], source = arg$[1];
      p2 = (function(args$){
        switch (false) {
        case !isStream(source):
          return pipeFrom(source, dest);
        default:
          return writeTo(dest, source, args$[2]);
        }
      }(arguments));
      return p2.then(promise.fulfill, promise.reject);
    });
    return promise;
  });
  module.exports = {
    slurp: slurp,
    spit: spit
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
