(function(){
  var assert, claire, l, o, equals, ok, forAll, sized, ref$, Negative, Any, Num, Int, Str, Id, AlphaStr, ws, capitals;
  assert = require('assert');
  claire = require('claire');
  l = require('../');
  o = it;
  equals = assert.strictEqual;
  ok = assert.ok;
  forAll = claire.forAll, sized = claire.sized;
  ref$ = claire.data, Negative = ref$.Negative, Any = ref$.Any, Num = ref$.Num, Int = ref$.Int, Str = ref$.Str, Id = ref$.Id, AlphaStr = ref$.AlphaStr;
  ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
  capitals = function(a){
    return a.charAt(0).toUpperCase() + "" + a.toLowerCase().slice(1);
  };
  describe('λ repeat', function(){
    var v;
    o('Should return an empty string for `times <= 0`', v = forAll(Str, Negative).satisfy(function(a, b){
      return l.repeat(0, a) === '' && l.repeat(b, a) === '';
    }).asTest());
    return o('Should repeat the given String `times` for `times > 0`', forAll(Str).satisfy(function(a){
      return l.repeat(2, a) === a + "" + a;
    }).asTest());
  });
  describe('λ concatenate', function(){
    o('Should handle gracefully non-strings.', forAll(Any, Any).satisfy(function(a, b){
      return l.concatenate(a, b) === a + "" + b;
    }).asTest());
    return o('Should return all arguments concatenated.', forAll(Str, Str, Str, Str).satisfy(function(a, b, c, d){
      return l.concatenate(a, b, c, d) === a + "" + b + c + d;
    }).asTest());
  });
  xdescribe('λ trim', function(){
    return o('Should remove whitespace from both sides.', forAll(Str).satisfy(function(a){
      return l.trim(ws + "" + a + ws) === a;
    }).asTest());
  });
  xdescribe('λ trim-left', function(){
    return o('Should remove whitespace only at the beginning.', forAll(Str).satisfy(function(a){
      return l.trimLeft(ws + "" + a + ws) === a + "" + ws;
    }).asTest());
  });
  xdescribe('λ trim-right', function(){
    return o('Should remove whitespace only at the end.', forAll(Str).satisfy(function(a){
      return l.trimRight(ws + "" + a + ws) === ws + "" + a;
    }).asTest());
  });
  describe('λ starts-with', function(){
    o('Should return true if `what` is at the beginning of the string.', forAll(Id, Id).given(curry$(function(x$, y$){
      return x$ !== y$;
    })).satisfy(function(a, b){
      return l.startsWith(a, a + "" + b);
    }).asTest());
    return o('Should return false if `what` is not at the beginning of the string.', forAll(Id).given(curry$(function(x$, y$){
      return x$ !== y$;
    })).satisfy(function(a){
      return !l.startsWith('0', a);
    }).asTest());
  });
  describe('λ ends-with', function(){
    o('Should return true if `what` is at the end of the string.', forAll(Id, Id).given(curry$(function(x$, y$){
      return x$ !== y$;
    })).satisfy(function(a, b){
      return l.endsWith(b, a + "" + b);
    }).asTest());
    return o('Should return false if `what` is not at the end of the string.', forAll(Id).given(curry$(function(x$, y$){
      return x$ !== y$;
    })).satisfy(function(a){
      return !l.endsWith('→', a);
    }).asTest());
  });
  describe('λ is-empty', function(){
    o('Should return true if the string is empty', function(){
      return ok(l.isEmpty(''));
    });
    return o('Should return false if the string is not empty', forAll(Str).given(function(it){
      return it.length > 0;
    }).satisfy(function(a){
      return !l.isEmpty(a);
    }).asTest());
  });
  describe('λ has', function(){
    o('Should return true if `what` is contained in the string.', forAll(sized(function(){
      return 10;
    }, Str), sized(function(){
      return 10;
    }, Str)).satisfy(function(a, b){
      return l.has(a, a + "" + b);
    }).asTest());
    o('Should differentiate casing.', forAll(AlphaStr, AlphaStr).given(function(a, b){
      return a !== '' && b !== '';
    }).satisfy(function(a, b){
      return !l.has(a.toUpperCase(), (a + "" + b).toLowerCase());
    }).asTest());
    return o('Should return false if `what` is not contained in the string.', forAll(AlphaStr, AlphaStr).given(function(a, b){
      return a !== '' && b !== '';
    }).satisfy(function(a, b){
      return !l.has(a.toLowerCase(), b.toUpperCase());
    }).asTest());
  });
  describe('λ upcase', function(){
    return o('Should return the string converted to upper case', forAll(Str).satisfy(function(a){
      return l.upcase(a) === a.toUpperCase();
    }).asTest());
  });
  describe('λ downcase', function(){
    return o('Should return the string converted to lower case.', forAll(Str).satisfy(function(a){
      return l.downcase(a) === a.toLowerCase();
    }).asTest());
  });
  describe('λ capitalise', function(){
    return o('Should capitalise only the first word, downcase the rest.', forAll(AlphaStr).satisfy(function(a){
      return l.capitalise(a + " " + a) === capitals(a) + " " + a.toLowerCase();
    }).asTest());
  });
  describe('λ capitalise-words', function(){
    return o('Should capitalise all words.', forAll(AlphaStr).satisfy(function(a){
      return l.capitaliseWords(a + " " + a + " " + a) === capitals(a) + " " + capitals(a) + " " + capitals(a);
    }).asTest());
  });
  describe('λ dasherise', function(){
    return o('Should replace all whitespace by dashes.', forAll(Id, Id, Id).satisfy(function(a, b, c){
      return l.dasherise(" " + a + " " + b + " " + c + " ") === a + "-" + b + "-" + c;
    }).asTest());
  });
  describe('λ camelise', function(){
    o('Should replace all whitespace separating words by the next letter upercased.', forAll(AlphaStr).given(function(it){
      return it.length > 0;
    }).satisfy(function(a){
      return l.camelise(a + " " + a + " " + a) === a.toLowerCase() + "" + capitals(a) + capitals(a);
    }).asTest());
    o('Should replace all hyphens separatig words by the next letter upercased.', forAll(AlphaStr).given(function(it){
      return it.length > 0;
    }).satisfy(function(a){
      return l.camelise(a + "-" + a + "-" + a) === a.toLowerCase() + "" + capitals(a) + capitals(a);
    }).asTest());
    return o('Should replace all underscores by the next letter uppercased.', forAll(AlphaStr).given(function(it){
      return it.length > 0;
    }).satisfy(function(a){
      return l.camelise(a + "_" + a + "_" + a) === a.toLowerCase() + "" + capitals(a) + capitals(a);
    }).asTest());
  });
  describe('λ first', function(){
    o('Should return an empty string for empty strings', function(){
      return equals('', l.first(''));
    });
    return o('Should return the first character in the string.', forAll(Str).satisfy(function(a){
      return l.first(a) === a.charAt(0);
    }).asTest());
  });
  describe('λ rest', function(){
    return o('Should return all but the first character in the string.', forAll(Str).satisfy(function(a){
      return l.rest(a) === a.slice(1);
    }).asTest());
  });
  describe('λ last', function(){
    o('Should return the last character in the string.', forAll(Str).given(function(it){
      return it.length > 0;
    }).satisfy(function(a){
      return l.last(a) === a.charAt(a.length - 1);
    }).asTest());
    return o('Should return an empty string for empty strings.', equals('', l.last('')));
  });
  describe('λ but-last', function(){
    return o('Should return all but the last character.', forAll(Str).satisfy(function(a){
      return l.butLast(a) === a.slice(0, -1);
    }).asTest());
  });
  describe('λ take', function(){
    return o('Should return the first n characters.', forAll(Str, Int).satisfy(function(a, n){
      return l.take(n, a) === a.slice(0, n);
    }).asTest());
  });
  describe('λ drop', function(){
    return o('Should return all but the first n characters.', forAll(Str, Int).satisfy(function(a, n){
      return l.drop(n, a) === a.slice(n);
    }).asTest());
  });
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
