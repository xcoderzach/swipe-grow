(function(){
  var repeat, concatenate, trim, trimLeft, trimRight, startsWith, endsWith, isEmpty, has, upcase, downcase, capitaliseWith, capitalise, capitaliseWords, dasherise, camelise, first, rest, last, butLast, take, drop, slice, slice$ = [].slice;
  repeat = curry$(function(times, text){
    switch (false) {
    case !(times <= 0):
      return '';
    default:
      return Array(times + 1).join(text);
    }
  });
  concatenate = function(){
    var xs;
    xs = slice$.call(arguments);
    return ''.concat.apply('', xs);
  };
  trim = function(text){
    return text.trim();
  };
  trimLeft = function(text){
    return text.replace(/^\s+/, '');
  };
  trimRight = function(text){
    return text.replace(/\s+$/, '');
  };
  startsWith = curry$(function(what, text){
    return text.slice(0, what.length) === what;
  });
  endsWith = curry$(function(what, text){
    return text.slice(-what.length) === what;
  });
  isEmpty = function(text){
    return text === '';
  };
  has = curry$(function(what, text){
    return text.indexOf(what) !== -1;
  });
  upcase = function(it){
    return it.toUpperCase();
  };
  downcase = function(it){
    return it.toLowerCase();
  };
  capitaliseWith = curry$(function(re, text){
    return downcase(text).replace(re, upcase);
  });
  capitalise = capitaliseWith(/\b\w/);
  capitaliseWords = capitaliseWith(/\b\w/g);
  dasherise = function(text){
    return text.trim().replace(/\s+/g, '-');
  };
  camelise = function(text){
    var boundary;
    boundary = /[\s\-_]+(\w)/g;
    return downcase(text.trim()).replace(boundary, function(_, letter){
      return upcase(letter);
    });
  };
  first = function(text){
    return text.charAt(0);
  };
  rest = function(text){
    return text.slice(1);
  };
  last = function(text){
    return text.charAt(text.length - 1);
  };
  butLast = function(text){
    return text.slice(0, -1);
  };
  take = curry$(function(size, text){
    return text.slice(0, size);
  });
  drop = curry$(function(size, text){
    return text.slice(size);
  });
  slice = curry$(function(start, end, text){
    return text.slice(start, end);
  });
  module.exports = {
    repeat: repeat,
    concatenate: concatenate,
    trim: trim,
    trimLeft: trimLeft,
    trimRight: trimRight,
    startsWith: startsWith,
    endsWith: endsWith,
    isEmpty: isEmpty,
    has: has,
    upcase: upcase,
    downcase: downcase,
    capitalise: capitalise,
    capitaliseWords: capitaliseWords,
    dasherise: dasherise,
    camelise: camelise,
    first: first,
    rest: rest,
    last: last,
    butLast: butLast,
    take: take,
    drop: drop,
    slice: slice
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
